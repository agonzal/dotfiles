--     ___ ___   ___ ___  _______  ______   _______  ______   
--    (   Y   ) |   Y   ||   _   ||   _  \ |   _   ||   _  \  
--     \  1  /  |.      ||.  |   ||.  |   ||.  1   ||.  |   \ 
--     /  _  \  |. \_/  ||.  |   ||.  |   ||.  _   ||.  |    \
--    /:  |   \ |:  |   ||:  1   ||:  |   ||:  |   ||:  1    /
--   (::. |:.  )|::.|:. ||::.. . ||::.|   ||::.|:. ||::.. . / 
--    `--- ---' `--- ---'`-------'`--- ---'`--- ---'`------'  
--------------------------------------- config :: electr0n    
----------------------------------------------------------


import System.IO
import System.Exit

import XMonad
import XMonad.Hooks.SetWMName
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.ManageHelpers(doFullFloat, doCenterFloat, isFullscreen, isDialog)
import XMonad.Config.Desktop

import XMonad.Util.Run(spawnPipe)
import XMonad.Util.NamedScratchpad (NamedScratchpad(NS), namedScratchpadManageHook, namedScratchpadAction, customFloating)
import XMonad.Actions.SpawnOn
import XMonad.Util.SpawnOnce ( spawnOnce )
import XMonad.Util.EZConfig (additionalKeys, additionalMouseBindings)
import XMonad.Actions.CycleWS
import XMonad.Hooks.UrgencyHook
import qualified Codec.Binary.UTF8.String as UTF8

import XMonad.Layout.Spacing
import XMonad.Layout.Gaps
import XMonad.Layout.ResizableTile
---import XMonad.Layout.NoBorders
import XMonad.Layout.Fullscreen (fullscreenFull)
import XMonad.Layout.Cross(simpleCross)
import XMonad.Layout.Spiral(spiral)
import XMonad.Layout.ThreeColumns
import XMonad.Layout.MultiToggle
import XMonad.Layout.MultiToggle.Instances
import XMonad.Layout.IndependentScreens
import XMonad.Layout.SimpleFloat ( simpleFloat )


import XMonad.Layout.CenteredMaster(centerMaster)

import Graphics.X11.ExtraTypes.XF86
import Graphics.X11.ExtraTypes.XF86 
    (xF86XK_Mail, xF86XK_WWW, xF86XK_Search, xF86XK_AudioLowerVolume, xF86XK_AudioRaiseVolume, xF86XK_AudioMute, xF86XK_MonBrightnessDown, xF86XK_MonBrightnessUp, xF86XK_AudioPlay, xF86XK_AudioPrev) 
import qualified XMonad.StackSet as W
import qualified Data.Map as M
import qualified Data.ByteString as B
import Control.Monad (liftM2)
import qualified DBus as D
import qualified DBus.Client as D


myStartupHook = do
    spawn "setxkbmap -option ctrl:nocaps "
    spawn "xcape -e 'Control_L=Escape'"
    spawn "exec ~/bin/lock.sh"
    spawnOnce "volumeicon &"
    spawnOnce "blueman-applet &"
    spawnOnce "nm-applet &"
    spawnOnce "greenclip daemon &"
    spawnOnce "picom -fb"
    spawnOnce "dunst"
    spawnOnce "xsetroot -cursor_name left_ptr"
    spawnOnce "nitrogen --restore"
    spawnOnce "~/.config/polybar/launch.sh"  
    spawnOnce "numlockx &"
    setWMName "LG3D"

-- colours
normBord = "#4c566a"
focdBord = "#5e81ac"
fore     = "#abb2bf"
back     = "#1e222a"
winType  = "#c678dd"

--mod4Mask= super key
--mod1Mask= alt key
--controlMask= ctrl key
--shiftMask= shift key

myTerminal = kitty
myModMask = mod4Mask
encodeCChar = map fromIntegral . B.unpack
myFocusFollowsMouse = True
myBorderWidth = 2
myWorkspaces    = ["\61612","\61899","\61947","\61635","\61502","\61501","\61705","\61564","\62150","\61872"]

myScratchPads = 
     [ NS "terminal" (myTerminal ++ " --class scratchpad") (resource =? "kitty") myPosition
     , NS "music" (myTerminal ++ " --class music -e cmus") (resource =? "music") myPosition
     , NS "bpytop"  (myTerminal ++ " --class bpytop -e bpytop") (resource =? "bpytop") myPosition
 ] where myPosition = customFloating $ W.RationalRect (1/3) (1/3) (1/3) (1/3)

myBaseConfig = desktopConfig

-- window manipulations
  myManageHook = composeAll . concat $
    [ [isDialog --> doCenterFloat]
    , [className =? c --> doCenterFloat | c <- myCFloats]
    , [title =? t --> doFloat | t <- myTFloats]
    , [resource =? r --> doFloat | r <- myRFloats]
    , [resource =? i --> doIgnore | i <- myIgnores]
    , [(className =? x <||> title =? x <||> resource =? x) --> doShift "\61612" | x <- my1Shifts]
    , [(className =? x <||> title =? x <||> resource =? x) --> doShift "\61899" | x <- my2Shifts]
    , [(className =? x <||> title =? x <||> resource =? x) --> doShift "\61947" | x <- my3Shifts]
    , [(className =? x <||> title =? x <||> resource =? x) --> doShift "\61635" | x <- my4Shifts]
    , [(className =? x <||> title =? x <||> resource =? x) --> doShift "\61502" | x <- my5Shifts]
    , [(className =? x <||> title =? x <||> resource =? x) --> doShift "\61501" | x <- my6Shifts]
    , [(className =? x <||> title =? x <||> resource =? x) --> doShift "\61705" | x <- my7Shifts]
    , [(className =? x <||> title =? x <||> resource =? x) --> doShift "\61564" | x <- my8Shifts]
   
    ]
    where
    -- doShift = doF . liftM2 (.) W.greedyView W.shift
    myCFloats = ["Arandr", "Pavucontrol", "Blueman-manager", "Virt-manager", "Galculator", "Anaconda-navigator", "feh", "mpv"]
    myTFloats = ["Downloads", "Save As...", "Panel preferences", "Aggressor-aggressor", "Cobalt Strike"]
    myRFloats = ["bpytop", "music"]
    myIgnores = ["desktop_window", "kdesktop", isDialog]
    my1Shifts = ["Evolution", "geary"]
    my2Shifts = ["Google-chrome-stable"]
    my3Shifts = ["kitty"]
    my4Shifts = ["Lightcord", "Slack", "TelegramDesktop"]
    my5Shifts = ["Gimp", "feh"]
    my6Shifts = ["vlc", "mpv"]
    my7Shifts = ["Virtualbox"]
    my8Shifts = ["Calibre", "Zathura"] namedScratchpadManageHook NamedScratchpad
    




myLayout = spacingRaw True (Border 0 5 5 5) True (Border 5 5 5 5) True $ avoidStruts $ mkToggle (NBFULL ?? NOBORDERS ?? EOT) $ tiled ||| Mirror tiled ||| spiral (6/7)  ||| ThreeColMid 1 (3/100) (1/2) ||| simpleFloat 
    where
        tiled = Tall nmaster delta tiled_ratio
        nmaster = 1
        delta = 3/100
        tiled_ratio = 1/2


myMouseBindings (XConfig {XMonad.modMask = modMask}) = M.fromList $

    -- mod-button1, Set the window to floating mode and move by dragging
    [ ((modMask, 1), (\w -> focus w >> mouseMoveWindow w >> windows W.shiftMaster))

    -- mod-button2, Raise the window to the top of the stack
    , ((modMask, 2), (\w -> focus w >> windows W.shiftMaster))

    -- mod-button3, Set the window to floating mode and resize by dragging
    , ((modMask, 3), (\w -> focus w >> mouseResizeWindow w >> windows W.shiftMaster))

    ]


-- keys config

myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $
      -- launch a terminal
    [ ((modm .|. shiftMask, xK_Return          ), spawn $ XMonad.terminal conf)


    , ((0,        xF86XK_WWW                   ), spawn "google-chrome-stable")
    , ((mod1Mask,          xK_f                ), spawn "thunar")
    , ((modm,              xK_c                ), spawn "calibre") 
    , ((0,        xF86XK_Mail                  ), spawn "evolution")
    
    , ((modm .|. mod1Mask, xK_f                ), sendMessage $ Toggle NBFULL) 
    -- lock screen
    , ((modm,              xK_F1               ), spawn "~/bin/betterlockscreen -l blur") 

    -- launch rofi and htop 
    , ((0,        xF86XK_Search                ), spawn "google-chrome-stable")
    , ((modm,               xK_o               ), spawn "~/bin/launcher.sh")
    , ((modm,               xK_p               ), spawn "kitty -e htop")

    -- Task management via todo-txt and rofi. 
    , ((modm,               xK_d               ), spawn "exec ~/bin/dofi")

    -- Launch slack / lightcord
    , ((modm,               xK_s               ), spawn "slack")
    , ((modm .|. mod1Mask,  xK_d               ), spawn "lightcord")

    -- Audio keys
    --, ((0,         xF86XK_AudioPlay), spawn "playerctl play-pause")
    --, ((0,         xF86XK_AudioPrev), spawn "playerctl previous")
    --, ((0,         xF86XK_AudioNext), spawn "playerctl next")
    
    , ((0,        xF86XK_AudioRaiseVolume      ), spawn "amixer sset Master 5%+")
    , ((0,        xF86XK_AudioLowerVolume      ), spawn "amixer sset Master 5%-")
    , ((0,        xF86XK_AudioMute             ), spawn "amixer sset Master toggle")

    -- Brightness keys
    , ((0,                    xF86XK_MonBrightnessUp), spawn "brightnessctl s +10%")
    , ((0,                    xF86XK_MonBrightnessDown), spawn "brightnessctl s 10-%")
    
    -- ScratchPads mod1mask = ALT key. 
    , ((mod1Mask,   xK_m              ), namedScratchpadAction myScratchPads "music")
    , ((mod1Mask,   xK_t              ), namedScratchpadAction myScratchPads "terminal")
    , ((mod1Mask,   xK_b              ), namedScratchpadAction myScratchPads "bpytop")

    -- Screenshot 
    , ((0,         xK_Print                    ), spawn "exec ~/bin/rofi-screenshot")
    , ((modm,      xK_Print                    ), spawn "exec ~/bin/screenrec.sh")
    , ((modm .|. controlMask, xK_Print         ), spawn "pkill ffmpeg")
    --, ((modm,      xK_v                      ), spawn "exec ~/bin/visualizer")
  
    -- Bitwarden 
    , ((modm,      xK_b                        ), spawn "bitwarden-desktop") 

    -- Minimize stuff

   -- Enable/disable xautolock 
    , ((modm,                xK_z              ), spawn "exec ~/bin/inhibit_activate")
    , ((modm .|. shiftMask,  xK_z              ), spawn "exec ~/bin/inhibit_deactivate")

    -- close focused window
    , ((modm,                xK_x              ), kill)

    --Toggle Gaps.  
    , ((modm .|. controlMask, xK_g), sendMessage $ ToggleGaps)               -- toggle all gaps
    , ((modm .|. shiftMask, xK_g), sendMessage $ setGaps [(L,30), (R,30), (U,30), (D,40)]) -- reset the GapSpec

    
    , ((modm .|. controlMask, xK_t), sendMessage $ IncGap 10 L)              -- increment the left-hand gap
    , ((modm .|. shiftMask, xK_t     ), sendMessage $ DecGap 10 L)           -- decrement the left-hand gap
    
    , ((modm .|. controlMask, xK_y), sendMessage $ IncGap 10 U)              -- increment the top gap
    , ((modm .|. shiftMask, xK_y     ), sendMessage $ DecGap 10 U)           -- decrement the top gap
    
    , ((modm .|. controlMask, xK_u), sendMessage $ IncGap 10 D)              -- increment the bottom gap
    , ((modm .|. shiftMask, xK_u     ), sendMessage $ DecGap 10 D)           -- decrement the bottom gap

    , ((modm .|. controlMask, xK_i), sendMessage $ IncGap 10 R)              -- increment the right-hand gap
    , ((modm .|. shiftMask, xK_i     ), sendMessage $ DecGap 10 R)           -- decrement the right-hand gap

     -- Cycle through layout algorithms. 
    , ((modm,               xK_space ), sendMessage NextLayout)

    --  Reset the layouts on the current workspace to default
    , ((modm .|. shiftMask, xK_space ), setLayout $ XMonad.layoutHook conf)

    -- Resize viewed windows to the correct size
    , ((modm,               xK_n     ), refresh)

    -- Move focus to the next/prev workspace
    , ((modm,               xK_Right   ), nextWS)
    , ((modm,               xK_Left    ), prevWS)

    -- Move focus to the next window
    , ((modm,               xK_j     ), windows W.focusDown)

    -- Move focus to the previous window
    , ((modm,               xK_k     ), windows W.focusUp  )

    -- Move focus to the master window
    , ((modm,               xK_m     ), windows W.focusMaster  )

    -- Swap the focused window and the master window
    , ((modm,               xK_Return), windows W.swapMaster)

    -- Swap the focused window with the next window
    , ((modm .|. shiftMask, xK_j     ), windows W.swapDown  )

    -- Swap the focused window with the previous window
    , ((modm .|. shiftMask, xK_k     ), windows W.swapUp    )

    -- Shrink the master area
    , ((modm,               xK_h     ), sendMessage Shrink)

    -- Expand the master area
    , ((modm,               xK_l     ), sendMessage Expand)

    -- Push window back into tiling
    , ((modm,               xK_t     ), withFocused $ windows . W.sink)

    -- Increment the number of windows in the master area
    , ((modm              , xK_comma ), sendMessage (IncMasterN 1))

    -- Deincrement the number of windows in the master area
    , ((modm              , xK_period), sendMessage (IncMasterN (-1)))

    -- Toggle the status bar gap
    -- Use this binding with avoidStruts from Hooks.ManageDocks.
    -- See also the statusBar function from Hooks.DynamicLog.
    --
    , ((modm              , xK_b     ), sendMessage ToggleStruts)

    -- Quit xmonad
    , ((modm .|. shiftMask, xK_q     ), spawn "xfce4-session-logout")

    -- Restart xmonad
    , ((modm              , xK_q     ), spawn "xmonad --recompile ; xmonad --restart")

    -- Run xmessage with a summary of the default keybindings (useful for beginners)
    , ((modm .|. shiftMask, xK_slash ), spawn ("echo \"" ++ help ++ "\" | xmessage -file -"))
    ]
  ++

  -- mod-[1..9], Switch to workspace N
  -- mod-shift-[1..9], Move client to workspace N
  [((m .|. modMask, k), windows $ f i)

  --Keyboard layouts
  --qwerty users use this line
   | (i, k) <- zip (XMonad.workspaces conf) [xK_1,xK_2,xK_3,xK_4,xK_5,xK_6,xK_7,xK_8,xK_9,xK_0]

  

      , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)
      , (\i -> W.greedyView i . W.shift i, shiftMask)]]

  ++
  -- ctrl-{w,e,r}, Switch to physical/Xinerama screens 1, 2, or 3
  -- ctrl-shift-{w,e,r}, Move client to screen 1, 2, or 3
  [((m .|. controlMask, key), screenWorkspace sc >>= flip whenJust (windows . f))
      | (key, sc) <- zip [xK_w, xK_e] [0..]
      , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]


main :: IO ()
main = do

    dbus <- D.connectSession
    -- Request access to the DBus name
    D.requestName dbus (D.busName_ "org.xmonad.Log")
        [D.nameAllowReplacement, D.nameReplaceExisting, D.nameDoNotQueue]


    xmonad . ewmh $
            myBaseConfig
  

                {startupHook = myStartupHook
, layoutHook = gaps [(U,35), (D,5), (R,5), (L,5)] $ myLayout ||| layoutHook myBaseConfig
, manageHook = manageSpawn <+> myManageHook <+> manageHook myBaseConfig
, modMask = myModMask
, borderWidth = myBorderWidth
, handleEventHook    = handleEventHook myBaseConfig <+> fullscreenEventHook
, focusFollowsMouse = myFocusFollowsMouse
, workspaces = myWorkspaces
, focusedBorderColor = focdBord
, normalBorderColor = normBord
, keys = myKeys
, mouseBindings = myMouseBindings
}

help :: String
help = unlines ["The default modifier key is 'super'. Default keybindings:",
    "",
    "-- launching and killing programs",
    "mod-Shift-Enter  Launch kitty",
    "mod-o            Launch rofi",
    "mod-Shift-p      Launch gmrun",
    "mod-x            Close/kill the focused window",
    "mod-Space        Rotate through the available layout algorithms",
    "mod-Shift-Space  Reset the layouts on the current workSpace to default",
    "mod-n            Resize/refresh viewed windows to the correct size",
    "",
    "-- move focus up or down the window stack",
    "mod-Tab        Move focus to the next window",
    "mod-Shift-Tab  Move focus to the previous window",
    "mod-j          Move focus to the next window",
    "mod-k          Move focus to the previous window",
    "mod-m          Move focus to the master window",
    "",
    "-- modifying the window order",
    "mod-Return   Swap the focused window and the master window",
    "mod-Shift-j  Swap the focused window with the next window",
    "mod-Shift-k  Swap the focused window with the previous window",
    "",
    "-- resizing the master/slave ratio",
    "mod-h  Shrink the master area",
    "mod-l  Expand the master area",
    "",
    "-- floating layer support",
    "mod-t  Push window back into tiling; unfloat and re-tile it",
    "",
    "-- increase or decrease number of windows in the master area",
    "mod-comma  (mod-,)   Increment the number of windows in the master area",
    "mod-period (mod-.)   Deincrement the number of windows in the master area",
    "",
    "-- quit, or restart",
    "mod-Shift-q  Quit xmonad",
    "mod-q        Restart xmonad",
    "mod-[1..9]   Switch to workSpace N",
    "",
    "-- Workspaces & screens",
    "mod-Shift-[1..9]   Move client to workspace N",
    "mod-{w,e,r}        Switch to physical/Xinerama screens 1, 2, or 3",
    "mod-Shift-{w,e,r}  Move client to screen 1, 2, or 3",
    "",
    "-- Mouse bindings: default actions bound to mouse events",
    "mod-button1  Set the window to floating mode and move by dragging",
    "mod-button2  Raise the window to the top of the stack",
    "mod-button3  Set the window to floating mode and resize by dragging"]
