#
# weechat -- plugins.conf
#
# WARNING: It is NOT recommended to edit this file by hand,
# especially if WeeChat is running.
#
# Use commands like /set or /fset to change settings in WeeChat.
#
# For more info, see: https://weechat.org/doc/quickstart
#

[var]
buflist.format.extra = "${if:${plugins.var.buflist.item.extra}!=&&${buffer.local_variables.extra}!=? ${if:${type}==server?${color:black}:${color:31}}${buffer.local_variables.extra}}"
buflist.format.filter = "${if:${plugins.var.buflist.item.filter}!=&&${buffer.local_variables.filter}!=? ${if:${type}==server?${color:black}:${color:31}}${buffer.local_variables.filter}}"
buflist.format.fold = "${if:${plugins.var.buflist.item.fold}!=&&${type}==server?${color:black}${if:${buffer.local_variables.fold}==?▼:▲} }"
buflist.format.relay_count = "${if:${plugins.var.buflist.item.relay_count}!=&&${buffer.full_name}==relay.relay.list&&${info:relay_client_count,*,connected}!=? ${color:31}Total${\x3A}${info:relay_client_count,*,connected} IRC${\x3A}${info:relay_client_count,irc,connected} WeeChat${\x3A}${info:relay_client_count,weechat,connected}}"
buflist.format.server_name = "${if:${plugins.var.buflist.look.real_net_name}!=&&${info:irc_server_isupport_value,${name},NETWORK}!=?${info:irc_server_isupport_value,${name},NETWORK}:${name}}"
buflist.item.buffer_name = "1"
buflist.item.buffer_number = "1"
buflist.item.extra = "1"
buflist.item.filter = "1"
buflist.item.fold = "1"
buflist.item.hotlist = "1"
buflist.item.indent = "1"
buflist.item.lag = "0"
buflist.item.nick_prefix = "0"
buflist.item.relay_count = "1"
buflist.look.indent_tree = "1"
buflist.look.real_net_name = "1"
buflist.section.left.size = "15"
buflist.section.right.size = "5"
chanmon.item.chan.bg = "${if:${plugins.var.chanmon.look.powerline}!=?${if:${tg_highlight}!=?124:31}:default}"
chanmon.item.chan.content = "${color:underline}${my_channel_no_prefix}"
chanmon.item.chan.fg = "${if:${plugins.var.chanmon.look.powerline}!=?white:${if:${tg_highlight}!=?124:31}}"
chanmon.item.chan.length = "4"
chanmon.item.chan.separator = "${if:${plugins.var.chanmon.look.powerline}!=?${if:${tg_highlight}!=?52:24}:white}"
chanmon.item.date.bg = "${if:${plugins.var.chanmon.look.powerline}!=?${if:${tg_highlight}!=?52:24}:default}"
chanmon.item.date.content = "${color:underline}${cut:5,,${my_time_only}}"
chanmon.item.date.fg = "${if:${plugins.var.chanmon.look.powerline}!=?white:${if:${tg_highlight}!=?124:31}}"
chanmon.item.date.length = "5"
chanmon.item.date.separator = "${if:${plugins.var.chanmon.look.powerline}!=?${if:${tg_highlight}!=?52:24}:white}"
chanmon.item.nick.bg = "${if:${plugins.var.chanmon.look.powerline}!=?${if:${tg_highlight}!=?124:31}:default}"
chanmon.item.nick.content = "${color:underline}${if:${tg_tags}=~,irc_action,?    *:${tg_tag_nick}}"
chanmon.item.nick.fg = "${if:${plugins.var.chanmon.look.powerline}!=?white:${if:${tg_highlight}!=?124:31}}"
chanmon.item.nick.length = "5"
chanmon.item.nick.separator = "${if:${plugins.var.chanmon.look.powerline}!=?${if:${tg_highlight}!=?52:24}:white}"
chanmon.item.serv.bg = "${if:${plugins.var.chanmon.look.powerline}!=?${if:${tg_highlight}!=?124:31}:default}"
chanmon.item.serv.content = "${color:underline}${server}"
chanmon.item.serv.fg = "${if:${plugins.var.chanmon.look.powerline}!=?white:${if:${tg_highlight}!=?124:31}}"
chanmon.item.serv.length = "2"
chanmon.item.serv.separator = "${if:${plugins.var.chanmon.look.powerline}!=?${if:${tg_highlight}!=?52:24}:white}"
chanmon.list = "date,serv,chan,nick"
chanmon.look.hidden_channels = "1"
chanmon.look.powerline = "0"
conky_fields_to_display_csv = "Uptime,CPU,RAM,Swap,Up,Down"
control_buffers2_previous_active_window = "1"
control_buffers2_window = "3"
control_buffers_previous_active_window = "1"
control_buffers_window = "2"
highmon.item.chan.bg = "${if:${plugins.var.highmon.look.powerline}!=?124:default}"
highmon.item.chan.content = "${color:underline}${my_channel_no_prefix}"
highmon.item.chan.fg = "${if:${plugins.var.highmon.look.powerline}!=?white:124}"
highmon.item.chan.length = "4"
highmon.item.chan.separator = "${if:${plugins.var.highmon.look.powerline}!=?52:white}"
highmon.item.date.bg = "${if:${plugins.var.highmon.look.powerline}!=?52:default}"
highmon.item.date.content = "${color:underline}${cut:5,,${my_time_only}}"
highmon.item.date.fg = "${if:${plugins.var.highmon.look.powerline}!=?white:124}"
highmon.item.date.length = "5"
highmon.item.date.separator = "${if:${plugins.var.highmon.look.powerline}!=?52:white}"
highmon.item.nick.bg = "${if:${plugins.var.highmon.look.powerline}!=?124:default}"
highmon.item.nick.content = "${color:underline}${if:${tg_tags}=~,irc_action,?    *:${tg_tag_nick}}"
highmon.item.nick.fg = "${if:${plugins.var.highmon.look.powerline}!=?white:124}"
highmon.item.nick.length = "5"
highmon.item.nick.separator = "${if:${plugins.var.highmon.look.powerline}!=?52:white}"
highmon.item.serv.bg = "${if:${plugins.var.highmon.look.powerline}!=?124:default}"
highmon.item.serv.content = "${color:underline}${server}"
highmon.item.serv.fg = "${if:${plugins.var.highmon.look.powerline}!=?white:124}"
highmon.item.serv.length = "2"
highmon.item.serv.separator = "${if:${plugins.var.highmon.look.powerline}!=?52:white}"
highmon.list = "date,serv,chan,nick"
highmon.look.hidden_channels = "1"
highmon.look.powerline = "1"
my_newsmon_colors = "1,4,9,10,12,28,29,30,31,34,35,38,39,58,64,65,70,75,94,95,96,98,100,105,106,130,132,133,135,136,138,141,160,161,162,165,166,167,168,169,172,200,202,203,204,206"
newsmon.item.site_name.bg = "${if:${plugins.var.newsmon.look.powerline}!=?${info:nick_color_name,${my_site}${my_site_sections};${plugins.var.my_newsmon_colors}}:default}"
newsmon.item.site_name.content = "${color:underline}${cutscr:+12,…,${my_site}}"
newsmon.item.site_name.fg = "${if:${plugins.var.newsmon.look.powerline}!=?white:${info:nick_color_name,${my_site}${my_site_sections};${plugins.var.my_newsmon_colors}}}"
newsmon.item.site_name.length = ""
newsmon.item.site_name.separator = "white"
newsmon.item.site_sections.bg = "${if:${plugins.var.newsmon.look.powerline}!=?${info:nick_color_name,${my_site}${my_site_sections};${plugins.var.my_newsmon_colors}}:default}"
newsmon.item.site_sections.content = "${color:underline}${cutscr:+${calc:12-${if:${lengthscr:${my_site}}>=12?12:${lengthscr:${my_site}}}+6},…,${if:${my_site_sections}!=?${my_site_sections}:N/A}}"
newsmon.item.site_sections.fg = "${if:${plugins.var.newsmon.look.powerline}!=?white:${info:nick_color_name,${my_site}${my_site_sections};${plugins.var.my_newsmon_colors}}}"
newsmon.item.site_sections.length = ""
newsmon.item.site_sections.separator = "white"
newsmon.list = "site_name,site_sections"
newsmon.look.powerline = "0"
python.auto_away.idletime = "20"
python.auto_away.message = "Idle"
python.autojoin.autosave = "off"
python.autojoinem.sorted = "off"
python.buffer_dmenu.dmenu.command = "dmenu -b -i -l 20"
python.buffer_dmenu.focus = "false"
python.buffer_dmenu.focus.wm = "i3"
python.buffer_dmenu.fzf_tmux.command = "sed -e "s/b'//" -e s#\\n#\n#g | fzf-tmux -w 40 -h 70%"
python.buffer_dmenu.launcher = "dmenu"
python.buffer_dmenu.rofi.command = "rofi -p '# ' -dmenu -lines 10 -columns 8 -auto-select -mesg '<big>Pick a <b>buffer</b> to jump to:</big>'"
python.buffer_dmenu.title.regex = "WeeChat \d+\.\d+"
python.collapse_channel.activity = "off"
python.collapse_channel.channel_exclude = ""
python.collapse_channel.hotlist = "4"
python.collapse_channel.server_exclude = ""
python.collapse_channel.single_channel_exclude = ""
python.go.auto_jump = "off"
python.go.buffer_number = "on"
python.go.color_name = "black,cyan"
python.go.color_name_highlight = "red,cyan"
python.go.color_name_highlight_selected = "red,brown"
python.go.color_name_selected = "black,brown"
python.go.color_number = "yellow,magenta"
python.go.color_number_selected = "yellow,red"
python.go.fuzzy_search = "off"
python.go.message = "Go to: "
python.go.short_name = "off"
python.go.short_name_server = "off"
python.go.sort = "number,beginning"
python.go.use_core_instead_weechat = "off"
python.grep.clear_buffer = "off"
python.grep.default_tail_head = "10"
python.grep.go_to_buffer = "on"
python.grep.log_filter = ""
python.grep.max_lines = "4000"
python.grep.show_summary = "on"
python.grep.size_limit = "2048"
python.grep.timeout_secs = "300"
python.histsearch.color_name = "black,cyan"
python.histsearch.color_name_highlight = "red,cyan"
python.histsearch.color_name_highlight_selected = "red,brown"
python.histsearch.color_name_selected = "black,brown"
python.histsearch.color_number = "yellow,magenta"
python.histsearch.color_number_selected = "yellow,red"
python.histsearch.display_selected_only = "false"
python.histsearch.message = "Command: "
python.notify_send.desktop_entry = "weechat"
python.notify_send.ellipsis = "[..]"
python.notify_send.escape_html = "on"
python.notify_send.hide_messages_in_buffers_that_match = ""
python.notify_send.icon = "/usr/share/icons/hicolor/32x32/apps/weechat.png"
python.notify_send.ignore_buffers = ""
python.notify_send.ignore_buffers_starting_with = ""
python.notify_send.ignore_messages_tagged_with = "notify_none,irc_join,irc_quit,irc_part,irc_status,irc_nick_back,irc_401,irc_402"
python.notify_send.ignore_nicks = "-,--,-->"
python.notify_send.ignore_nicks_starting_with = ""
python.notify_send.max_length = "72"
python.notify_send.min_notification_delay = "500"
python.notify_send.nick_separator = ": "
python.notify_send.notify_for_current_buffer = "on"
python.notify_send.notify_on_all_messages_in_buffers = ""
python.notify_send.notify_on_all_messages_in_buffers_that_match = ""
python.notify_send.notify_on_all_messages_in_current_buffer = "off"
python.notify_send.notify_on_filtered_messages = "off"
python.notify_send.notify_on_highlights = "on"
python.notify_send.notify_on_messages_that_match = ""
python.notify_send.notify_on_privmsgs = "on"
python.notify_send.notify_when_away = "on"
python.notify_send.timeout = "5000"
python.notify_send.transient = "on"
python.notify_send.urgency = "normal"
python.shortenurl.bitly_add_to_history = "true"
python.shortenurl.bitly_key = ""
python.shortenurl.bitly_login = ""
python.shortenurl.color = "red"
python.shortenurl.ignore_list = "http://is.gd,http://tinyurl.com,http://bit.ly"
python.shortenurl.short_own = "off"
python.shortenurl.shortener = "isgd"
python.shortenurl.urllength = "30"
python.text_item.interval = "0"
python.text_item.window_is_active = "all|window_switch ${if:${window[gui_current_window]} == ${window}?ACTIVE}"
python.urlbar.ignore = "grep"
python.urlbar.remember_amount = "25"
python.urlbar.show_buffername = "on"
python.urlbar.show_index = "on"
python.urlbar.show_nick = "on"
python.urlbar.show_timestamp = "on"
python.urlbar.time_format = "%H:%M"
python.urlbar.use_popup = "on"
python.urlbar.visible_amount = "5"
python.urlbar.visible_seconds = "5"
python.urlbuf.display_active_buffer = "on"
python.urlbuf.display_buffer_number = "on"
python.urlbuf.display_nick = "off"
python.urlbuf.display_private = "on"
python.urlbuf.skip_buffers = ""
python.urlbuf.skip_duplicates = "on"
python.urlserver.buffer_short_name = "off"
python.urlserver.color = "darkgray"
python.urlserver.color_in_msg = ""
python.urlserver.debug = "off"
python.urlserver.display_urls = "on"
python.urlserver.display_urls_in_msg = "off"
python.urlserver.http_allowed_ips = ""
python.urlserver.http_auth = ""
python.urlserver.http_auth_redirect = "on"
python.urlserver.http_autostart = "on"
python.urlserver.http_bg_color = "#f4f4f4"
python.urlserver.http_css_url = ""
python.urlserver.http_embed_image = "off"
python.urlserver.http_embed_youtube = "off"
python.urlserver.http_embed_youtube_size = "480*350"
python.urlserver.http_fg_color = "#000"
python.urlserver.http_hostname = ""
python.urlserver.http_hostname_display = ""
python.urlserver.http_open_in_new_page = "on"
python.urlserver.http_port = ""
python.urlserver.http_port_display = ""
python.urlserver.http_prefix_suffix = " "
python.urlserver.http_scheme_display = "http"
python.urlserver.http_time_format = "%d/%m/%y %H:%M:%S"
python.urlserver.http_title = "WeeChat URLs"
python.urlserver.http_url_prefix = ""
python.urlserver.msg_filtered = "off"
python.urlserver.msg_ignore_buffers = "core.weechat,python.grep"
python.urlserver.msg_ignore_dup_urls = "off"
python.urlserver.msg_ignore_regex = ""
python.urlserver.msg_ignore_tags = "irc_quit,irc_part,notify_none"
python.urlserver.msg_require_tags = "nick_"
python.urlserver.separators = "[|]"
python.urlserver.url_min_length = "0"
python.urlserver.urls_amount = "100"
python.vimode.copy_clipboard_cmd = "xclip -selection c"
python.vimode.imap_esc = ""
python.vimode.imap_esc_timeout = "1000"
python.vimode.line_number_prefix = ""
python.vimode.line_number_suffix = " "
python.vimode.mode_indicator_cmd_color = "white"
python.vimode.mode_indicator_cmd_color_bg = "cyan"
python.vimode.mode_indicator_insert_color = "white"
python.vimode.mode_indicator_insert_color_bg = "blue"
python.vimode.mode_indicator_normal_color = "white"
python.vimode.mode_indicator_normal_color_bg = "gray"
python.vimode.mode_indicator_prefix = ""
python.vimode.mode_indicator_replace_color = "white"
python.vimode.mode_indicator_replace_color_bg = "red"
python.vimode.mode_indicator_search_color = "white"
python.vimode.mode_indicator_search_color_bg = "magenta"
python.vimode.mode_indicator_suffix = ""
python.vimode.no_warn = "off"
python.vimode.paste_clipboard_cmd = "xclip -selection c -o"
python.vimode.search_vim = "off"
python.vimode.user_mappings = ""
python.weemustfeed.feeds = ""
python.weemustfeed.interval = "300"
translate_lang = "fr"

[desc]
python.autojoinem.sorted = "channels will be sorted in autojoin-option. if autojoin-option contains channel-keys, this option will be ignored. (default: "off")"
python.buffer_dmenu.dmenu.command = "command used to call dmenu (default: "dmenu -b -i -l 20")"
python.buffer_dmenu.focus = "whether to immediately focus the terminal after selecting buffer (default: "false")"
python.buffer_dmenu.focus.wm = "wm focus logic to use (supported: i3) (default: "i3")"
python.buffer_dmenu.fzf_tmux.command = "command used to call fzf-tmux (default: "sed -e "s/b'//" -e s#\\n#\n#g | fzf-tmux -w 40 -h 70%")"
python.buffer_dmenu.launcher = "launcher to use (supported: dmenu, rofi, fzf_tmux) (default: "dmenu")"
python.buffer_dmenu.rofi.command = "command used to call rofi (default: "rofi -p '# ' -dmenu -lines 10 -columns 8 -auto-select -mesg '<big>Pick a <b>buffer</b> to jump to:</big>'")"
python.buffer_dmenu.title.regex = "regex used to match weechat's title window (default: "WeeChat \d+\.\d+")"
python.collapse_channel.activity = "show channels with activity only (see option hotlist). all exclude options will be ignored (default: "off")"
python.collapse_channel.channel_exclude = "exclude some channel, comma separated list. This is server independent (wildcard "*" is allowed) (default: "")"
python.collapse_channel.hotlist = "unhide buffer by activity, when buffer is added to hotlist (0=off, 1=message, 2=private message, 3=highlight, 4=all) (default: "4")"
python.collapse_channel.server_exclude = "exclude some server, comma separated list (wildcard "*" is allowed) (default: "")"
python.collapse_channel.single_channel_exclude = "exclude specific channels on specific server, space separated list (eg. freenode.#weechat) (default: "")"
python.go.auto_jump = "automatically jump to buffer when it is uniquely selected (default: "off")"
python.go.buffer_number = "display buffer number (default: "on")"
python.go.color_name = "color for buffer name (not selected) (default: "black,cyan")"
python.go.color_name_highlight = "color for highlight in buffer name (not selected) (default: "red,cyan")"
python.go.color_name_highlight_selected = "color for highlight in a selected buffer name (default: "red,brown")"
python.go.color_name_selected = "color for a selected buffer name (default: "black,brown")"
python.go.color_number = "color for buffer number (not selected) (default: "yellow,magenta")"
python.go.color_number_selected = "color for selected buffer number (default: "yellow,red")"
python.go.fuzzy_search = "search buffer matches using approximation (default: "off")"
python.go.message = "message to display before list of buffers (default: "Go to: ")"
python.go.short_name = "display and search in short names instead of buffer name (default: "off")"
python.go.short_name_server = "prefix short names with server names for search and display (default: "off")"
python.go.sort = "comma-separated list of keys to sort buffers (the order is important, sorts are performed in the given order): name = sort by name (or short name),  (default: "number,beginning")"
python.go.use_core_instead_weechat = "use name "core" instead of "weechat" for core buffer (default: "off")"
python.notify_send.desktop_entry = "Name of the desktop entry for WeeChat. Default: weechat."
python.notify_send.ellipsis = "Ellipsis to be used for notifications that are too long. Default: [..]."
python.notify_send.escape_html = "Escapes the '<', '>', and '&' characters in notification messages. Default: on."
python.notify_send.hide_messages_in_buffers_that_match = "A comma-separated list of regex patterns for names of buffers from which you want to receive notifications without messages. Default: ""."
python.notify_send.icon = "Path to an icon to be shown in notifications. Default: /usr/share/icons/hicolor/32x32/apps/weechat.png."
python.notify_send.ignore_buffers = "A comma-separated list of buffers from which no notifications should be shown. Default: ""."
python.notify_send.ignore_buffers_starting_with = "A comma-separated list of buffer prefixes from which no notifications should be shown. Default: ""."
python.notify_send.ignore_messages_tagged_with = "A comma-separated list of message tags for which no notifications should be shown. Default: notify_none,irc_join,irc_quit,irc_part,irc_status,irc_nick_back,irc_401,irc_402."
python.notify_send.ignore_nicks = "A comma-separated list of nicks from which no notifications should be shown. Default: -,--,-->."
python.notify_send.ignore_nicks_starting_with = "A comma-separated list of nick prefixes from which no notifications should be shown. Default: ""."
python.notify_send.max_length = "Maximal length of a notification (0 means no limit). Default: 72."
python.notify_send.min_notification_delay = "A minimal delay between successive notifications from the same buffer (in milliseconds; set to 0 to show all notifications). Default: 500."
python.notify_send.nick_separator = "A separator between a nick and a message. Default: : ."
python.notify_send.notify_for_current_buffer = "Send also notifications for the currently active buffer. Default: on."
python.notify_send.notify_on_all_messages_in_buffers = "A comma-separated list of buffers for which you want to receive notifications on all messages that appear in them. Default: ""."
python.notify_send.notify_on_all_messages_in_buffers_that_match = "A comma-separated list of regex patterns of buffers for which you want to receive notifications on all messages that appear in them. Default: ""."
python.notify_send.notify_on_all_messages_in_current_buffer = "Send a notification on all messages in the currently active buffer. Default: off."
python.notify_send.notify_on_filtered_messages = "Send notifications also on filtered (hidden) messages. Default: off."
python.notify_send.notify_on_highlights = "Send notifications on highlights. Default: on."
python.notify_send.notify_on_messages_that_match = "A comma-separated list of regex patterns that you want to receive notifications on when message matches. Default: ""."
python.notify_send.notify_on_privmsgs = "Send notifications on private messages. Default: on."
python.notify_send.notify_when_away = "Send also notifications when away. Default: on."
python.notify_send.timeout = "Time after which the notification disappears (in milliseconds; set to 0 to disable). Default: 5000."
python.notify_send.transient = "When a notification expires or is dismissed, remove it from the notification bar. Default: on."
python.notify_send.urgency = "Urgency (low, normal, critical). Default: normal."
python.text_item.interval = "How often (in seconds) to force an update of all items. 0 means deactivated"
python.urlbuf.display_active_buffer = "display URLs from the active buffer"
python.urlbuf.display_buffer_number = "display the buffer's number or name (on/name/off)"
python.urlbuf.display_nick = "display the nick of the user"
python.urlbuf.display_private = "display URLs from private messages"
python.urlbuf.skip_buffers = "a comma separated list of buffer numbers or buffer names to skip"
python.urlbuf.skip_duplicates = "skip the URL that is already in the urlbuf"
python.urlserver.buffer_short_name = "use buffer short name on dedicated buffer (default: "off")"
python.urlserver.color = "color for urls displayed after message (default: "darkgray")"
python.urlserver.color_in_msg = "color for urls displayed inside irc message: it is a number (irc color) between 00 and 15 (see doc for a list of irc colors) (default: "")"
python.urlserver.debug = "print some debug messages (default: "off")"
python.urlserver.display_urls = "display URLs below messages (default: "on")"
python.urlserver.display_urls_in_msg = "add shorten url next to the original url (only in IRC messages) (useful for urlserver behind relay/irc) (default: "off")"
python.urlserver.http_allowed_ips = "regex for IPs allowed to use server (example: "^(123\.45\.67\.89|192\.160\..*)$") (default: "")"
python.urlserver.http_auth = "login and password (format: "login:password") required to access to page with list of URLs (note: content is evaluated, see /help eval) (default: "")"
python.urlserver.http_auth_redirect = "require the login/password (if option "http_auth" is set) for URLs redirections (default: "on")"
python.urlserver.http_autostart = "start the built-in HTTP server automatically) (default: "on")"
python.urlserver.http_bg_color = "background color for HTML page (default: "#f4f4f4")"
python.urlserver.http_css_url = "URL of external Cascading Style Sheet to add (BE CAREFUL: the HTTP referer will be sent to site hosting CSS file!) (empty value = use default embedded CSS) (default: "")"
python.urlserver.http_embed_image = "embed images in HTML page (BE CAREFUL: the HTTP referer will be sent to site hosting image!) (default: "off")"
python.urlserver.http_embed_youtube = "embed youtube videos in HTML page (BE CAREFUL: the HTTP referer will be sent to youtube!) (default: "off")"
python.urlserver.http_embed_youtube_size = "size for embedded youtube video, format is "xxx*yyy" (default: "480*350")"
python.urlserver.http_fg_color = "foreground color for HTML page (default: "#000")"
python.urlserver.http_hostname = "force hostname/IP in bind of socket (empty value = auto-detect current hostname) (default: "")"
python.urlserver.http_hostname_display = "display this hostname in shortened URLs (default: "")"
python.urlserver.http_open_in_new_page = "open links in new pages/tabs (default: "on")"
python.urlserver.http_port = "force port for listening (empty value = find a random free port) (default: "")"
python.urlserver.http_port_display = "display this port in shortened URLs. Useful if you forward a different external port to the internal port (default: "")"
python.urlserver.http_prefix_suffix = "suffix displayed between prefix and message in HTML page (default: " ")"
python.urlserver.http_scheme_display = "display this scheme in shortened URLs (default: "http")"
python.urlserver.http_time_format = "time format in the HTML page (default: "%d/%m/%y %H:%M:%S")"
python.urlserver.http_title = "title of the HTML page (default: "WeeChat URLs")"
python.urlserver.http_url_prefix = "prefix to add in URLs to prevent external people to scan your URLs (for example: prefix "xx" will give URL: http://host.com:1234/xx/8) (default: "")"
python.urlserver.msg_filtered = "shorten URLs in filtered messages (with /filter) (default: "off")"
python.urlserver.msg_ignore_buffers = "comma-separated list (without spaces) of buffers to ignore (full name like "irc.freenode.#weechat") (default: "core.weechat,python.grep")"
python.urlserver.msg_ignore_dup_urls = "ignore duplicated URLs (do not add an URL in list if it is already) (default: "off")"
python.urlserver.msg_ignore_regex = "ignore messages matching this regex (default: "")"
python.urlserver.msg_ignore_tags = "comma-separated list (without spaces) of tags (or beginning of tags) to ignore (for example, use "notify_none" to ignore self messages or "nick_weebot" to ignore messages from nick "weebot") (default: "irc_quit,irc_part,notify_none")"
python.urlserver.msg_require_tags = "comma-separated list (without spaces) of tags (or beginning of tags) required to shorten URLs (for example "nick_" to shorten URLs only in messages from other users) (default: "nick_")"
python.urlserver.separators = "separators for short url list (string with exactly 3 chars) (default: "[|]")"
python.urlserver.url_min_length = "minimum length for an URL to be shortened (0 = shorten all URLs, -1 = detect length based on shorten URL) (default: "0")"
python.urlserver.urls_amount = "number of URLs to keep in memory (and in file when script is not loaded) (default: "100")"
python.vimode.copy_clipboard_cmd = "command used to copy to clipboard; must read input from stdin (default: "xclip -selection c")"
python.vimode.imap_esc = "use alternate mapping to enter Normal mode while in Insert mode; having it set to 'jk' is similar to `:imap jk <Esc>` in vim (default: "")"
python.vimode.imap_esc_timeout = "time in ms to wait for the imap_esc sequence to complete (default: "1000")"
python.vimode.line_number_prefix = "prefix for line numbers (default: "")"
python.vimode.line_number_suffix = "suffix for line numbers (default: " ")"
python.vimode.mode_indicator_cmd_color = "color for mode indicator in Command mode (default: "white")"
python.vimode.mode_indicator_cmd_color_bg = "background color for mode indicator in Command mode (default: "cyan")"
python.vimode.mode_indicator_insert_color = "color for mode indicator in Insert mode (default: "white")"
python.vimode.mode_indicator_insert_color_bg = "background color for mode indicator in Insert mode (default: "blue")"
python.vimode.mode_indicator_normal_color = "color for mode indicator in Normal mode (default: "white")"
python.vimode.mode_indicator_normal_color_bg = "background color for mode indicator in Normal mode (default: "gray")"
python.vimode.mode_indicator_prefix = "prefix for the bar item mode_indicator (default: "")"
python.vimode.mode_indicator_replace_color = "color for mode indicator in Replace mode (default: "white")"
python.vimode.mode_indicator_replace_color_bg = "background color for mode indicator in Replace mode (default: "red")"
python.vimode.mode_indicator_search_color = "color for mode indicator in Search mode (default: "white")"
python.vimode.mode_indicator_search_color_bg = "background color for mode indicator in Search mode (default: "magenta")"
python.vimode.mode_indicator_suffix = "suffix for the bar item mode_indicator (default: "")"
python.vimode.no_warn = "don't warn about problematic keybindings and tmux/screen (default: "off")"
python.vimode.paste_clipboard_cmd = "command used to paste clipboard; must output content to stdout (default: "xclip -selection c -o")"
python.vimode.search_vim = "allow n/N usage after searching (requires an extra <Enter> to return to normal mode) (default: "off")"
python.vimode.user_mappings = "see the `:nmap` command in the README for more info; please do not modify this field manually unless you know what you're doing (default: "")"
